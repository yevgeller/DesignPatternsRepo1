@page
@model DesignPatternsRepo1.Pages.Test1Model
@{
}


<div id="div1">Testing Shmesting</div>

<div id="tbl"></div>
<br />
<br />
<table>
    <tr><td>1-1</td><td>1-2</td></tr>
    <tr><td>2-1</td><td>2-2</td></tr>
</table>

<script>
    const field = Array.from(Array(10), () => new Array(10).fill('.'));
    const MINEMARKER = 'X';

    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById('div1').addEventListener('click', one);
        createField();
        calculateMarkers();
        createTable();
        document.querySelectorAll('#field td').forEach(el => el.addEventListener('click', function () {
            let row = el.getAttribute('data-row');
            let col = el.getAttribute('data-col');
            console.log('row-col:', row + ' - ' + col);
            console.log('field value:', field[row][col]);
        }));
    });

    function one() {
        alert('Hi!');
    }

    function createField() {
        let mineCount = 10;

        while (mineCount > 0) {
            rndRow = randomNumber();
            rndCol = randomNumber();
            if (field[rndRow][rndCol] !== MINEMARKER) {
                field[rndRow][rndCol] = MINEMARKER;
                mineCount--;
            }
        }
        console.log(field);
    }

    function calculateMarkers() {
        for (let i = 0; i < field.length; i++) {
            for (let j = 0; j < field[i].length; j++) {
                if (field[i][j] === MINEMARKER) continue;
                let marker = calcFieldMarker(i, j);
                if (marker > 0) {
                    field[i][j] = marker.toString();
                }
            }
        }
        console.log(field);
    }

    function calcFieldMarker(row, col) {
        let n = calcN(row, col);
        let ne = calcNE(row, col);
        let e = calcE(row, col);
        let se = calcSE(row, col);
        let s = calcS(row, col);
        let sw = calcSW(row, col);
        let w = calcW(row, col);
        let nw = calcNW(row, col);
        return n + ne + e + se + s + sw + w + nw;
    }

    function calcN(row, col) {
        if (row === 0) return 0;
        if (field[row - 1][col] === MINEMARKER) return 1;
        return 0;
    }

    function calcNE(row, col) {
        if (row === 0 || col === field[row].length) return 0;
        return field[row - 1][col + 1] === MINEMARKER ? 1 : 0;
    }

    function calcE(row, col) {
        if (col === field[row].length) return 0;
        return field[row][col + 1] === MINEMARKER ? 1 : 0;
    }

    function calcSE(row, col) {
        if (row === field.length - 1 || col === field[row].length) return 0;
        return field[row + 1][col + 1] === MINEMARKER ? 1 : 0;
    }

    function calcS(row, col) {
        if (row === field.length - 1) return 0;
        return field[row + 1][col] === MINEMARKER ? 1 : 0;
    }

    function calcSW(row, col) {
        if (row === field.length - 1 || col === 0) return 0;
        return field[row + 1][col - 1] === MINEMARKER ? 1 : 0;
    }

    function calcW(row, col) {
        if (col === 0) return 0;
        return field[row][col - 1] === MINEMARKER ? 1 : 0;
    }

    function calcNW(row, col) {
        if (row === 0 || col === 0) return 0;
        return field[row - 1][col - 1] === MINEMARKER ? 1 : 0;
    }

    function createTable() {
        const rows = 10;
        let container = document.getElementById("tbl");
        let tbl = document.createElement('table');
        tbl.setAttribute('id', 'field');
        let tbody = document.createElement('tbody')
        for (let i = 0; i < rows; i++) {
            let tr = document.createElement('tr');
            for (let j = 0; j < rows; j++) {
                let td = document.createElement('td');
                td.setAttribute('data-row', i);
                td.setAttribute('data-col', j);
                let textNode = i + ' - ' + j;

                if (field[i][j] == MINEMARKER) {
                    textNode = MINEMARKER;
                }
                td.appendChild(document.createTextNode(textNode));
                tr.appendChild(td);
                tbody.appendChild(tr);
            }
            tbl.appendChild(tbody);
            container.appendChild(tbl);
        }
    }

    function randomNumber() {
        const upperBound = 10;
        return Math.floor(Math.random() * upperBound);
    }

</script>

<style>
    td {
        border: 1px solid red;
        padding: 1px;
        margin: 3px;
    }
</style>