@page
@model DesignPatternsRepo1.Pages.Structural.FacadeModel
@{
}


<h1 class="title is-1 is-spaced"><i class="fa-solid  fa-igloo mr-2"></i>Facade</h1>
<h2 class="subtitle">Hiding complex procedures behind a wall and providing a push-button interface</h2>
<div class="content">

    <div class="block">
        The idea behind the Facade software design principle is quite simple. If you 
        can simplify calling a complex scenario, then create a Facade class, expose
        one method that can call the complex scenario for you and have the Facade class
        do all the heavy lifting and/or orchestration.
    </div>
    <div class="block">
        The code below is somewhat confusing, but the main point is that there are some
        scenarios that require complex and perplexing actions to make things happen. The 
        idea of the Facade pattern is to "shove" those actions "under the hood" and give 
        a key that would start the machine with one simple action.
    </div>
    <pre><code class="language-ts"></code></pre>
</div>


<bottom-nav next-pointer-word="Next"
            next-icon1="fa-solid fa-circle-question"
            next-icon3="fa-solid fa-arrow-right"
            next-link="Index"
            next-name="TBA"></bottom-nav>
<script>hljs.highlightAll();</script>