@page
@model DesignPatternsRepo1.Pages.Structural.CompositeModel
@{
}

<h1 class="title is-1 is-spaced"><i class="fa-solid fa-magnifying-glass-arrow-right mr-2"></i>Composite</h1>
<h2 class="subtitle">Working with tree-like components in a uniform way regardless of whether it's a leaf or a container</h2>
<div class="content">

    <div class="block">
        This pattern is used for working with nested-container type of items. It's a uniform way to treat an object
        whether it's another container or actually an item that can do some action.
    </div>
    <div class="block">
        Here's the recipe of all that's needed to implement the pattern:
        <ol>
            <li>General class called "Component" that has basic properties and methods</li>
            <li>Class "Leaf" that accepts an identifier as a parameter (a name in the example case). This class
                can perform a basic operation that is required (just return its name in our example);
            </li>
            <li>Class "Composite" that also takes an identifier as a parameter. It has a few other notable characteristics:
                <ul>
                    <li>Tracks a collection of its children items (leafs or composites) rooted under this composite</li>
                    <li>Processes additions/removals to this collection</li>
                    <li>Primary operation returns its name, as well as triggers a primary operation on all tracked children</li>
                </ul>
            </li>
        </ol>
    </div>
<pre>
    <code class="language-ts">class Component { //base class extracting repeating functionality
  name: string;
  primaryOperation(depth: number): void {}

  constructor(name: string) {
    this.name = name;
  }
}

class Leaf extends Component {
  name: string;
  constructor(name: string) {
    super(name);
    this.name = name;
  }
  primaryOperation(depth: number): void {
    console.log(Array(depth).join("-") + this.name);
  }
}

class Composite extends Component {
  name: string;
  components: Component[]; //collection to track children
  constructor(name: string) {
    super(name);
    this.name = name;
    this.components = [];
  }
  primaryOperation(depth: number): void {
    console.log(Array(depth).join("-") + this.name);
    this.components.forEach((x) => x.primaryOperation(depth + 2)); //trigger primary operation on all tracked children
  }
  add(component: Component): void {
    this.components.push(component);
  }
  remove(component: Component): void {
    this.components = this.components.filter((x) => x.name !== component.name);
  }
}</code></pre>
<div class="block">Here's some test code and output:</div>
<pre><code class="language-ts">const root = new Composite("root");
root.add(new Leaf("Leaf 1"));
root.add(new Leaf("Leaf 2"));

const comp1 = new Composite("Subtree 1");
comp1.add(new Leaf("Subtree 1 Leaf 1"));
comp1.add(new Leaf("Subtree 1 Leaf 2"));

const comp2 = new Composite("Sub-Subtree 1");
comp2.add(new Leaf("Sub-Subtree 1 Leaf 1"));
comp1.add(comp2);

root.add(comp1);
root.add(new Leaf("Leaf 3"));

root.primaryOperation(1);

/*
//output:
root
--Leaf 1
--Leaf 2
--Subtree 1
----Subtree 1 Leaf 1
----Subtree 1 Leaf 2
----Sub-Subtree 1
------Sub-Subtree 1 Leaf 1
--Leaf 3
*/
</code></pre>
<h2 class="subtitle">Bonus: Composite with Builder</h2>
<div class="block">If you notice in the calling code above, there's some repetition that can be automated using the <a>Builder pattern</a></div>


    <div class="block">
       Source: <a href="https://app.pluralsight.com/library/courses/c-sharp-design-patterns-composite/table-of-contents" 
       target="_blank">C# Design Patterns: Composite on Pluralsight.com</a>
    </div>
</div>

<bottom-nav next-pointer-word="Next"
            next-icon1="fa-solid fa-circle-question"
            next-icon3="fa-solid fa-arrow-right"
            next-link="Index"
            next-name="TBA"></bottom-nav>
<script>hljs.highlightAll();</script>