@page
@model DesignPatternsRepo1.Pages.Structural.Adapter_problemModel
@{
}


<h1 class="title is-1 is-spaced"><i class="fa-solid fa-plug mr-1"></i>Adapter Pattern</h1>
<div class="content">

    <div class="block">
        Adapter pattern is used to combine two pieces of functionality that don't work together right out of the box,
        like trying to use data out of an old/new service that comes in an unusual format. Alternatively, an adapter
        pattern can be used to create one way to interact with 2+ resources.
    </div>
    <div class="block">
        In this example, class JSONProcessor only uses data in JSON format. There is a requirement to
        utilize data out of a service that returns data in CSV format (CSVProvider below). In order to
        use data from CSVProvider in JSONProcessor, an adapter is required.
    </div>
    <div class="block">
        "Adapter" is the class that takes CSV from CSVProvider, converts it to JSON and feeds it
        to an instance of the JSONProcessor class.
    </div>
    <div class="block">
        Implementation recipe:
        <ol>
            <li>Add a private static field to hold the instance of the object</li>
            <li>Make the constructor of the class private</li>
            <li>
                Create a public static method to (create if does not exist and then) return the instance of the object.
            </li>
            <li>Replace all calls in existing code use the method to get the instance of an object</li>
        </ol>

    </div>
    <div class="block">
        The following example illustrates a ticket checker. Imagine you came to see a show,
        and you give your ticket to any attendants in a booth to verify that your ticket is legitimate
        &mdash; haven't been used yet. And for some reasons there is no database available for use.
        Whoever shows up first and shows a ticket with a certain number, can come in. Anyone else who
        tries to come in using a ticket that's already been verified cannot come in.
    </div>
    <div class="block">
        When a ticket is validated, it's being stored in an internal store (an array of strings),
        and if there is more than one machine checking the tickets, they need to operate on the same
        subset of data. A singleton is handy in this matter because it maintains one store, and
        "opening" any other line would not help the matter because they all work with the same
        data store.
    </div>
<pre><code class="hljs language-ts">class TicketChecker {
  private static instance: TicketChecker; //field to hold the instance of the class
  private ticketsInUse: string[] = [];
  private constructor() {}; //private constructor

  public static getInstance(): TicketChecker { //method to return an instance of the object
    if (!TicketChecker.instance) {
      TicketChecker.instance = new TicketChecker();
    }

    return TicketChecker.instance;
  }

  public validateTicket(ticketNumber: string): string {
    if (this.ticketsInUse.indexOf(ticketNumber) >= 0)
      return `Ticket '${ticketNumber}' has already been used.`;

    this.ticketsInUse.push(ticketNumber);
    return `Ticket '${ticketNumber}' has not been used yet. Welcome to the show!`;
  }

  public ticketIsAlreadyInUse(ticketNumber: string): string {
    if (this.ticketsInUse.indexOf(ticketNumber) >= 0)
      return `Ticket '${ticketNumber}' has already been used.`;
    return `Ticket '${ticketNumber}' has not been used yet.`;
  }

  public displayUsedTickets(): string {
    if (this.ticketsInUse.length === 0) return "none";
    return this.ticketsInUse
      .slice(1, this.ticketsInUse.length)
      .reduce((prev, current) => prev + ", " + current, this.ticketsInUse[0]);
  }
}
  </code>
</pre>

    <bottom-nav next-pointer-word="Next"
                next-icon1="fa-solid fa-circle-question"
                next-icon3="fa-solid fa-arrow-right"
                next-link="Index"
                next-name="TBA"></bottom-nav>

    <script>hljs.highlightAll();</script>
