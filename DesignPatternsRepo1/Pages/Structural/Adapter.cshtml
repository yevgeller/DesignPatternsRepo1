@page
@model DesignPatternsRepo1.Pages.Structural.Adapter_problemModel
@{
}


<h1 class="title is-1 is-spaced"><i class="fa-solid fa-plug mr-1"></i>Adapter Pattern</h1>
<div class="content">

    <div class="block">
        Adapter pattern is used to combine two pieces of functionality that don't work together right out of the box,
        like trying to use data out of an old/new service that comes in an unusual format. Alternatively, an adapter
        pattern can be used to create one way to interact with 2+ resources.
    </div>
    <div class="block">
        In this example, class JSONProcessor only uses data in JSON format. There is a requirement to
        utilize data out of a service that returns data in CSV format (CSVProvider below). In order to
        use data from CSVProvider in JSONProcessor, an adapter is required.
    </div>
    <pre><code class="hljs language-ts">class CSVProvider {
  public getColumnHeaders(): string {
    return "FirstName,LastName,Age";
  }

  public getData(): string {
    const line1 = "John,Smith,25";
    const line2 = "Mary,Smith,25";
    const line3 = "Jacob,Smith,3";
    const CRLF = "\n";
    const interimResult = [line1, line2, line3];
    const res = interimResult.join(CRLF);
    return res;
  }
}

class JSONProcessor {
  public doSomethingWithJSON(json: string): void {
    console.log(JSON.stringify(json, null, 2));
  }

  public showJSON(json: string): void {
    console.table(json);
  }
}</code></pre>

    <div class="block">
        "Adapter" is the class that takes CSV from CSVProvider, converts it to JSON and feeds it
        to an instance of the JSONProcessor class.
    </div>
<pre><code class="hljs language-ts">class Adapter {
  private csvProvider: CSVProvider;
  constructor() {
    this.csvProvider = new CSVProvider();
  }
  public ConvertCsvToJson(): string {
    const incoming = this.csvProvider.getData().split("\n");
    const columnHeaders = this.csvProvider.getColumnHeaders().split(",");
    let arr = [] as any;
    for (let i = 1; i < incoming.length; i++) {
      console.table(incoming[i]);
      let vals = incoming[i].split(",");
      const person = new Object();
      for (let j = 0; j < columnHeaders.length; j++) {
        person[columnHeaders[j]] = vals[j];
      }
      console.log("person", person);
      arr.push(person);
      //console.table(vals);
    }
    return arr;
  }
}</code>
</pre>
    <div class="block">
        And this is one of the ways that it could be used:
    </div>
<pre><code class="hljs language-ts">
    //test code here
    </code></pre>

    <bottom-nav next-pointer-word="Next"
                next-icon1="fa-solid fa-circle-question"
                next-icon3="fa-solid fa-arrow-right"
                next-link="Index"
                next-name="TBA"></bottom-nav>

    <script>hljs.highlightAll();</script>
