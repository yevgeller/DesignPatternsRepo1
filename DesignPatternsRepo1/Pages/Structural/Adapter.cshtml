@page
@model DesignPatternsRepo1.Pages.Structural.Adapter_problemModel
@{
}


<h1 class="title is-1 is-spaced"><i class="fa-solid fa-plug mr-1"></i>Adapter Pattern</h1>
<div class="content">

    <div class="block">
        Adapter pattern is used to combine two pieces of functionality that don't work together right out of the box,
        like trying to use data out of an old/new service that comes in an unusual format. Alternatively, an adapter
        pattern can be used to create one way to interact with 2+ resources.
    </div>
    <div class="block">
        In this example, class JSONProcessor only uses data in JSON format. There is a requirement to
        utilize data out of a service that returns data in CSV format (CSVProvider below). In order to
        use data from CSVProvider in JSONProcessor, an adapter is required.
    </div>
    <div class="block">
        The following class, CSVProvider returns some data in CSV format. 
    </div>
    <pre><code class="hljs language-ts">class CSVProvider {
  public getColumnHeaders(): string {
    return "FirstName,LastName,Age";
  }

  public getData(): string {
    const line1 = "John,Smith,25";
    const line2 = "Mary,Smith,25";
    const line3 = "Jacob,Smith,3";
    const CRLF = "\n";
    const interimResult = [line1, line2, line3];
    const res = interimResult.join(CRLF);
    return res;
  }
}</code></pre>
<div class="block">The following class, JSONProcessor, needs to work with data that is provided by the CSVProvider,
    but JSONProcessor can only work with JSON data. The formats are not quite compatible.
</div>
<pre><code class="hljs language-ts">class JSONProcessor {
  public doSomethingWithJSON(json: string): void {
    console.log(JSON.stringify(json, null, 2));
  }

  public showJSON(json: string): void {
    console.table(json);
  }
}</code></pre>
    <div class="block">
        "Adapter" is the middleware that takes CSV from CSVProvider, converts it to JSON and feeds it
        to an instance of the JSONProcessor class. No need to alter neither CSVProvider nor JSONProcessor, Adapter
        acts as a shim that makes the two data sources work.
    </div>
<pre><code class="hljs language-ts">class Adapter {
  private csvProvider: CSVProvider;
  constructor() {
    this.csvProvider = new CSVProvider();
  }
  public ConvertCsvToJson(): string {
    const incoming = this.csvProvider.getData().split("\n");
    const columnHeaders = this.csvProvider.getColumnHeaders().split(",");
    let arr = [] as any;
    for (let i = 0; i < incoming.length; i++) {
      let vals = incoming[i].split(",");
      const person = new Object();
      for (let j = 0; j < columnHeaders.length; j++) {
        person[columnHeaders[j]] = vals[j];
      }
      arr.push(person);
    }
    return arr;
  }
}</code>
</pre>
    <div class="block">
        And this is one of the ways that it could be used:
    </div>
<pre><code class="hljs language-ts">const adapter1 = new Adapter();
const jp = new JSONProcessor();
jp.doSomethingWithJSON(adapter1.ConvertCsvToJson());
jp.showJSON(adapter1.ConvertCsvToJson());

//result
[
  {
    "FirstName": "John",
    "LastName": "Smith",
    "Age": "25"
  },
  {
    "FirstName": "Mary",
    "LastName": "Smith",
    "Age": "25"
  },
  {
    "FirstName": "Jacob",
    "LastName": "Smith",
    "Age": "3"
  }
]
┌─────────┬───────────┬──────────┬──────┐
│ (index) │ FirstName │ LastName │ Age  │
├─────────┼───────────┼──────────┼──────┤
│    0    │  'John'   │ 'Smith'  │ '25' │
│    1    │  'Mary'   │ 'Smith'  │ '25' │
│    2    │  'Jacob'  │ 'Smith'  │ '3'  │
└─────────┴───────────┴──────────┴──────┘

    </code></pre>
    
    <bottom-nav next-pointer-word="Next"
                next-icon1="fa-solid fa-left-right"
                next-icon3="fa-solid fa-arrow-right"
                next-link="Structural|Bridge"
                next-name="Bridge"></bottom-nav>

    <script>hljs.highlightAll();</script>
