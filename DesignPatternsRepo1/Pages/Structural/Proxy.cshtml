@page
@model DesignPatternsRepo1.Pages.Structural.ProxyModel
@{
}

<h1 class="title is-1 is-spaced"><i class="fa-solid fa-door-open mr-2"></i>Proxy</h1>
<h2 class="subtitle">A placeholder for another object for a few reasons</h2>
<div class="content">

    <div class="block">
        The Proxy software design pattern puts another object between the caller and the callee and
        it is done for several reasons:
        <ul>
            <li>Remote access. Client communicates with a proxy object as if it was a local resource</li>
            <li>
                Virtualizing resources. Client communicates with a proxy object
                while an expensive object is created.
            </li>
            <li>
                Smart proxy. Client communicates with a proxy object while proxy object performs
                additional duties. Essentially a <a asp-area="" asp-page="/Structural/Decorator"><i class="fa-solid fa-chart-line mr-2"></i>Decorator</a>.
            </li>
            <li>
                Protection proxy. Client communicates with a proxy object, which ensures that the
                client actually has proper access to the resource.
            </li>
        </ul>
    </div>
    <div class="block">
        The difference between <a asp-area="" asp-page="/Structural/Decorator"><i class="fa-solid fa-chart-line mr-2"></i>Decorator</a> and Proxy is that 
        Proxy controls the lifecycle of an object that it contains, while Decorator is controlled by the execution flow. Also, Proxy controls access 
        to an object, while <a asp-area="" asp-page="/Structural/Decorator"><i class="fa-solid fa-chart-line mr-2"></i>Decorator</a> focuses on adding functionality.
    </div>
    <div class="block">
        Let's look at some code examples. First, let's define an interface that a resource provider uses, as wel as a "resource:"
    </div>
    <pre><code class="language-ts">interface IResourceProvider {
  getResource(): boolean;
}

class Resource {
  getResource(): boolean {
    console.log("Here you go!");
    return true;
  }
}
</code></pre>
    <div class="block">
        The next class is an example of a Proxy with complications. Access to the resource is granted on a random basis. The timeout is added to simulate
        creation of a large resource.
    </div>
<pre><code class="language-ts">class ResourceControllerByWhim implements IResourceProvider {
  resource: Resource;
  constructor() {
    this.resource = new Resource();
  }

  getResource(): boolean {
    let whim = Math.floor(Math.random() * 10);
    console.log("whim: ", whim);
    if (whim < 3) {
      console.log("contacting remote resource...");
      setTimeout(() => {
        this.resource.getResource();
        return true;
      }, 1000);
    } else {
      console.log("I don't feel like it, so no.");
      return false;
    }
  }
}</code></pre>

<div class="block">The following class is an example of a Protection Proxy:</div>

<pre><code class="language-ts">class ResourceControllerByPermissions implements IResourceProvider {
  resource: Resource;
  permission: string;
  constructor(permission: string) {
    this.resource = new Resource();
    this.permission = permission;
  }

  getResource(): boolean {
    if (this.permission === "access") return this.resource.getResource();
    else {
      console.log("Access denied");
      return false;
    }
  }
}</code></pre>

<div class="block">
Here is what it looks like when run:
</div>

<pre><code class="language-ts">/*
whim:  7
I don't feel like it, so no.
whim:  5
I don't feel like it, so no.
whim:  2
contacting remote resource...
Here you go!


----- Permission Proxy access example: no permissions
Access denied
----- Permission Proxy access example: with permissions
Here you go!*/</code></pre>
    <div class="block">
        Sources: <ul>
            <li>
                <a href="https://app.pluralsight.com/library/courses/c-sharp-10-design-patterns/table-of-contents">
                    C# 10 Design Patterns course (Pluralsight)
                </a>
            </li>
            <li>
                <a href="https://refactoring.guru/design-patterns/proxy">Proxy (Refactoring Guru)</a>
            </li>
        </ul>
    </div>
</div>




<bottom-nav next-pointer-word="Next"
            next-icon1="fa-solid fa-link"
            next-icon3="fa-solid fa-arrow-right"
            next-link="Behavioral|ChainOfResponsibility"
            next-name="Chain of Responsibility"></bottom-nav>
<script>hljs.highlightAll();</script>