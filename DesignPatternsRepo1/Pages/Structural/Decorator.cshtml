@page
@model DesignPatternsRepo1.Pages.Structural.DecoratorModel
@{
}


<div class="block">
    Decorator is a way to enhance a behavior of an object by adding a wrapper around 
    its functionality. In the example below, class SimulatedApi provides a fake call 
    to an API that can take anywhere between one and five seconds. Let's imagine that 
    we want to enhance the method by tracking how long the calls take and also add 
    caching in case the data has been previously received. Something that may come 
    to mind first would be to extend a class and add desired behavior. But inheritance 
    may put us on wheels such that future updates and enhancements may be limited. Favoring 
    Composition over Inheritance, the solution is to create a new class and inject the 
    API service as a dependency. First, we'll extract the interface:
</div>

<div class="block">

</div>

<div class="block">

</div>

<div class="block">

</div>

<div class="block">

</div>

<div class="block">

</div>

<div class="block">

</div>

<div class="block">

</div>

<div class="block">

</div>