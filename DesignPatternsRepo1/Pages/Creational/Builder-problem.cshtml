@page
@model DesignPatternsRepo1.Pages.Creational.Builder_problemModel
@{
}

<h1 class="title is-1 is-spaced">Builder Pattern &mdash; Problem</h1>
<h2 class="subtitle">
    Builder pattern simplifies construction of complex objects by extracting
    the steps and centralizing the control of what happens at each step. It
    also allows for easier customization.
</h2>


<script>hljs.highlightAll();</script>


<div class="block">
    Pizza shop. Need multiple overloads to take a pizza order. Well, not really because C# allows for default parameters,
    but still, the constructor method looks pretty intimidating even though these are not even all possible toppings.
</div>
<div class="block">
<pre><code class="language-csharp">
namespace NoBuilderPattern
{
    using System;

    public class Pizza {
        private int size = 16;
        private bool cheese = true;
        private bool pepperoni = false;
        private bool blackOlives = false;
        private bool greenOlives = false;
        private bool bellPeppers = false;
        private bool pineapple = false;
        private bool onions = false;
        private bool steak = false;
        private bool chicken = false;
        private bool bacon = false;
        private bool ranch = false;

        public Pizza()
        {
            this.size = 16;
        }

        public Pizza(int size)
        {
            this.size = size;
        }

        public Pizza(bool pepperoni)
        {
            this.pepperoni = pepperoni;
        }

        public Pizza(int size = 16, bool cheese = true, bool pepperoni = false, 
            bool blackOlives = false, bool greenOlives = false, bool bellPeppers = false,
            bool pineapple = false, bool onions = false, bool steak = false,
            bool chicken = false, bool bacon = false, bool ranch = false)
        {
            this.size = size;
            this.cheese = cheese;
            this.pepperoni = pepperoni;
            this.blackOlives = blackOlives;
            this.greenOlives = greenOlives;
            this.bellPeppers = bellPeppers;
            this.pineapple = pineapple;
            this.onions = onions;
            this.steak = steak;
            this.chicken = chicken;
            this.bacon = bacon;
            this.ranch = ranch;
        }
    }
}
  </code>
</pre>
</div>
<div class="block">
    <a class="navbar-item" asp-area="" asp-page="/Creational/Builder-solution">
        &nbsp;Solution: Builder Pattern&nbsp;&nbsp; <i class="fa-solid fa-arrow-right fa-3x"></i>
    </a>
</div>