@page
@model DesignPatternsRepo1.Pages.Behavioral.InterpreterModel
@{
}

<h1 class="title is-1 is-spaced"><i class="fa-solid fa-language mr-2"></i>Interpreter</h1>
<h2 class="subtitle">A way to translate data into another language using provided grammar and sentence structure</h2>
<div class="content">  

<div class="block">This pattern is used to translate something from one representation into another given the rules.
    The benefits come with scalability of the solution. An item can be translated into many
    representations using the same mechanism. That is quite convenient. The drawback of the pattern also comes with
    the increase of translation mechanisms: maintaining grammar and rules may become tedious. 
</div> 

<div class="block">The pattern implementation requires two things: first a <code>Context</code> class that provides
    input, the original representation, and a placeholder for output, the end result. The second required thing is 
    a set of rules, and it can be any class as long as it implements the <code>Interpret</code> method. The code
    example below shows a Context and an abstract class that specifies the <code>Interpret</code> method.
</div> 
<pre><code class="language-ts">class Context {
    input: string;
    output: string;
    constructor(input: string) {
        this.input = input;
        this.output = '';
    }
}

abstract class Expression {
    Interpret(context: Context): void { }
}
</code></pre>
<div class="block">Next, the set of rules, the meat of the pattern. The following implementation converts Oracle
    Data Definition Language into C# class code. This program helps convert an existing Oracle database into
    a code-first Entity Framework project. So an item like  <code>"STRING_FIELD" VARCHAR2(6 BYTE)</code> is 
    converted to <code>public string String_Field {get; set;} = string.Empty;</code>, and a field declared as, say, 
    <code>"ID" NUMBER(15,0)</code> needs to be translated to <code>public int Id {get; set;}</code> and so on. The 
    class listed below, <code></code> has one method, <code>Interpret</code>, that takes an item of type 
    <code>Context</code>, then consumes that Context's <code>input</code> field and appends translation to 
    <code>output</code> field. Input/output could be properties, but the type <code>Context</code> in this 
    case acts as a container, and the <code>OracleToEFExpression</code> class knows what to do with it. If another
    translation is needed, a different class can do that as long as it implements the <code>Expression</code> interface
    and uses <code>input</code> to provide a useful <code>output</code>.
</div> 
<pre><code class="language-ts">class OracleToEFExpression implements Expression {
    Interpret(context: Context): void {
        let properties = context.input.split('\n');
        properties.forEach(element => {
            if (element.length > 0) {
                let name = this.extractName(element);
                let type = this.extractType(element)
                let specifiedDefaultValue = this.extractDefaultConstraint(element);
                let determinedDefaultValue = this.convertDefaultValue(specifiedDefaultValue, type);
                context.output += `public ${type} ${this.convertNameToCamelCase(name)} { get; set; }`;
                if (determinedDefaultValue.length > 0)
                    context.output += ` = ${determinedDefaultValue};`
                context.output += '\n'
            }
        });

        console.log(context.output)
    }

    extractName(input: string): string {
        let firstQuote = input.indexOf('"');
        let nextQuote = input.indexOf('"', firstQuote + 1)
        if (firstQuote >= 0 && nextQuote > firstQuote) {
            return input.substring(firstQuote + 1, nextQuote)
        }
        return 'NO_NAME_FOUND'
    }

    extractType(input: string): string {
        let firstQuote = input.indexOf('"');
        let nextQuote = input.indexOf('"', firstQuote + 1)
        if (input.indexOf('VARCHAR2') > nextQuote) {
            return 'string'
        } else if (input.indexOf('NUMBER') > nextQuote) {
            return 'int'
        } else if (input.indexOf('CHAR') > nextQuote) {
            return 'bool'
        } else if (input.indexOf('TIMESTAMP') > nextQuote) {
            return 'DateTime'
        }
        return 'int'
    }

    extractDefaultConstraint(input: string): string {
        let defaultConstraintStartsAt = input.indexOf(' DEFAULT ');
        if (defaultConstraintStartsAt < 0)
            return '';
        return input.substring(defaultConstraintStartsAt, input.length);
    }

    convertDefaultValue(input: string, determinedDataType: string): string {

        if (determinedDataType === 'string')
            return 'string.Empty'
        if (input.trim().length === 0)
            return '';
        if (determinedDataType === 'int') {
            let ret = input.replace('DEFAULT', '');
            return ret.substring(0, ret.indexOf(','))
        }
        if (determinedDataType === 'bool')
            return input.indexOf('0') >= 0 ? 'false' : 'true';

        return '';
    }

    convertNameToCamelCase(input: string): string {
        let parts = input.split('_');
        parts.forEach((p, i) => parts[i] = this.camelCaseString(p));
        return parts.join('_');
    }

    camelCaseString(input: string): string {
        return input[0] + input.substring(1, input.length).toLocaleLowerCase()
    }
}

</code></pre>
<div class="block">The following code is used to call the interpreter mechanism described above:</div> 
<pre><code class="language-ts">let c = new Context(`
"ID" NUMBER(15,0), 
    "EMPLOYEE_CODE" VARCHAR2(6 BYTE), 
    "COMPANY_ID" NUMBER(15,0), 
    "FIRST_NAME" VARCHAR2(50 BYTE),
    "LAST_NAME" VARCHAR2(50 BYTE),
    "IS_ACTIVE" CHAR(1 BYTE) = '1',
    "HIRE_DATE" TIMESTAMP (6)`);


let oef = new OracleToEFExpression();
oef.Interpret(c)</code></pre>
<div class="block">And this is what we get back:</div> 
<pre><code class="language-ts">public int Id { get; set; }
public string Employee_Code { get; set; } = string.Empty;
public int Company_Id { get; set; }
public string First_Name { get; set; } = string.Empty;   
public string Last_Name { get; set; } = string.Empty;    
public bool Is_Active { get; set; }
public DateTime Hire_Date { get; set; }</code></pre>
<div class="block">Definitely useful for large conversions.</div> 

</div>

<bottom-nav next-pointer-word="Next"
            next-icon1="fa-solid fa-arrow-up-right-dots"
            next-icon3="fa-solid fa-arrow-right"
            next-link="Behavioral|Iterator"
            next-name="Iterator"></bottom-nav>
<script>hljs.highlightAll();</script>